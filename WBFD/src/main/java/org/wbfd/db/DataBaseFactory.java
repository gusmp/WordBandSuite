package org.wbfd.db;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DataBaseFactory
{

    private final String DATABASE_NAME = "wbfd";
    private Connection connection = null;

    public DataBaseFactory()
    {
    }

    private void openConnection() throws ClassNotFoundException, SQLException
    {
	Boolean createSchema = checkDataBaseFiles();
	Class.forName("org.hsqldb.jdbcDriver");
	connection = DriverManager.getConnection("jdbc:hsqldb:file:" + DATABASE_NAME, "sa", "");
	if (createSchema == true)
	{
	    createSchema();
	}

    }

    public Connection getConnection() throws ClassNotFoundException, SQLException
    {
	if (connection == null)
	{
	    openConnection();
	}

	return (connection);
    }

    private Boolean checkDataBaseFiles()
    {
	Boolean ret = true;
	File directory[] = new File(".").listFiles();
	for (File file : directory)
	{
	    if (file.getName().indexOf(DATABASE_NAME + ".data") != -1)
	    {
		ret = false;
		break;
	    }
	}

	return (ret);
    }

    public void cleanSchema()
    {
	try
	{
	    if (connection == null)
	    {
		openConnection();
	    }

	    connection.createStatement().execute("DROP TABLE PHRASAL_VERBS");
	    connection.createStatement().execute("DROP TABLE WORD_FORMATION");
	    connection.createStatement().execute("DROP TABLE COLLOCATION");

	}
	catch (SQLException exc)
	{
	}
	catch (ClassNotFoundException exc)
	{
	}
    }

    public void createSchema() throws ClassNotFoundException, SQLException
    {
	if (connection == null)
	{
	    openConnection();
	}

	// create table for phrasal verbs
	connection.createStatement().execute("CREATE CACHED TABLE PHRASAL_VERBS(" + "PHRASALVERB_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + "DATE DATE," + "LEVEL VARCHAR(10)," + "MEANING VARCHAR(300), " + "EXAMPLE VARCHAR(300)," + "KEY VARCHAR(50)," + "HITS INT" + ")");

	// create table for word formation
	connection.createStatement().execute("CREATE CACHED TABLE WORD_FORMATION(" + "WORDFORMATION_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + "DATE DATE," + "LEVEL VARCHAR(10)," + "WORDROOT VARCHAR(50)," + "SENTENCE1 VARCHAR(300), " + "SENTENCE_KEY1 VARCHAR(50), " + "SENTENCE2 VARCHAR(300), " + "SENTENCE_KEY2 VARCHAR(50), " + "SENTENCE3 VARCHAR(300), " + "SENTENCE_KEY3 VARCHAR(50), " + "HITS INT" + ")");

	// create table for collocation
	connection.createStatement().execute("CREATE CACHED TABLE COLLOCATION(" + "COLLOCATION_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + "DATE DATE," + "LEVEL VARCHAR(10)," + "SENTENCE1 VARCHAR(300), " + "SENTENCE2 VARCHAR(300), " + "SENTENCE3 VARCHAR(300), " + "PHRASE VARCHAR(300), " + "EXAMPLE VARCHAR(300)," + "KEY VARCHAR(50)," + "HITS INT" + ")");
    }

    public void closeConnection()
    {
	try
	{
	    connection.createStatement().execute("SHUTDOWN");
	    connection.close();
	}
	catch (SQLException exc)
	{
	}
    }
}
